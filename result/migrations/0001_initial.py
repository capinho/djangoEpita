# Generated by Django 3.0 on 2020-04-28 00:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_lecturer', models.BooleanField(default=False)),
                ('phone', models.CharField(blank=True, max_length=60, null=True)),
                ('address', models.CharField(blank=True, max_length=60, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='pictures/')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courseTitle', models.CharField(max_length=200)),
                ('courseCode', models.CharField(max_length=200, unique=True)),
                ('courseUnit', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, max_length=200)),
                ('level', models.CharField(blank=True, choices=[('INFOSUP', 'INFOSUP'), ('INFOSPE', 'INFOSPE'), ('ING1', 'ING1'), ('ING2', 'ING2'), ('ING3', 'ING3')], max_length=12)),
                ('semester', models.CharField(choices=[('First', 'First'), ('Second', 'Second')], max_length=200)),
                ('is_elective', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.CharField(max_length=200, unique=True)),
                ('is_current_session', models.BooleanField(blank=True, default=False, null=True)),
                ('next_session_begins', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_number', models.CharField(max_length=20, unique=True)),
                ('level', models.CharField(choices=[('INFOSUP', 'INFOSUP'), ('INFOSPE', 'INFOSPE'), ('ING1', 'ING1'), ('ING2', 'ING2'), ('ING3', 'ING3')], max_length=12)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TakenCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ca', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('exam', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('total', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('grade', models.CharField(blank=True, choices=[('Très Bien', 'Très Bien'), ('Bien', 'Bien'), ('Moyen', 'Moyen'), ('Insuffisant', 'Insuffisant'), ('Tres Insuffisant', 'Tres Insuffisant')], max_length=16)),
                ('comment', models.CharField(blank=True, choices=[('REUSSITE', 'REUSSITE'), ('ECHEC', 'ECHEC')], max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taken_courses', to='result.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(blank=True, choices=[('First', 'First'), ('Second', 'Second')], max_length=10)),
                ('is_current_semester', models.BooleanField(blank=True, default=False, null=True)),
                ('next_semester_begins', models.DateField(blank=True, null=True)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='result.Session')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpa', models.FloatField(null=True)),
                ('cgpa', models.FloatField(null=True)),
                ('semester', models.CharField(choices=[('First', 'First'), ('Second', 'Second')], max_length=100)),
                ('session', models.CharField(blank=True, max_length=100, null=True)),
                ('level', models.CharField(choices=[('INFOSUP', 'INFOSUP'), ('INFOSPE', 'INFOSPE'), ('ING1', 'ING1'), ('ING2', 'ING2'), ('ING3', 'ING3')], max_length=100)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result.Student')),
            ],
        ),
        migrations.CreateModel(
            name='RepeatingStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('INFOSUP', 'INFOSUP'), ('INFOSPE', 'INFOSPE'), ('ING1', 'ING1'), ('ING2', 'ING2'), ('ING3', 'ING3')], max_length=100)),
                ('session', models.CharField(blank=True, max_length=100, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result.Student')),
            ],
        ),
        migrations.CreateModel(
            name='CourseAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('courses', models.ManyToManyField(related_name='allocated_course', to='result.Course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='result.Session')),
            ],
        ),
        migrations.CreateModel(
            name='CarryOverStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(blank=True, choices=[('First', 'First'), ('Second', 'Second')], max_length=100, null=True)),
                ('session', models.CharField(blank=True, max_length=100, null=True)),
                ('level', models.CharField(blank=True, choices=[('INFOSUP', 'INFOSUP'), ('INFOSPE', 'INFOSPE'), ('ING1', 'ING1'), ('ING2', 'ING2'), ('ING3', 'ING3')], max_length=12, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='result.Student')),
            ],
        ),
    ]
